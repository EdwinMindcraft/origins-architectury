package io.github.apace100.origins.mixin;

import io.github.edwinmindcraft.origins.api.capabilities.IOriginContainer;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.Entity;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

@Mixin(Entity.class)
public abstract class SelectionInvulnerabilityMixin {
	@Inject(at = @At("HEAD"), method = "isInvulnerableTo", cancellable = true)
	private void makeOriginInvulnerable(DamageSource damageSource, CallbackInfoReturnable<Boolean> cir) {
		if (!damageSource.isBypassInvul()) {
			IOriginContainer.get((Entity) (Object) this).ifPresent(container -> {
				if (!container.hasAllOrigins())
					cir.setReturnValue(true);
			});
		}
	}
}
